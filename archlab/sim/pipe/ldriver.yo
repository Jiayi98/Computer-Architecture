                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6a803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Jiayi Zhou (jz22393)
                            | # Describe how and why you modified the baseline code.
                            | # 1. Using iaddq instead of the combination of movq and addq and rearrange
                            | # instructions to eliminating unneeded memory references.
                            | # 2. Loading values from memory into the processor in advance for 
                            | # later use in later instructions, which exploite characteristics of 
                            | # pipeline to make the program run faster.
                            | # 3.Unrolling the original loop makes it loop less times, 
                            | # which deals with multiple elements on each iteration rather than single
                            | # element.This allows the program to jump back less and run faster.
                            | # 4.Rearrange where to place jmp and conditional jump to avoid misprediction.
                            | # Thus I try to compute the values along both branches.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len <= 4?
0x03e: 713b01000000000000   | 	jle reset
                            | 
                            | 
0x047:                      | loop:
0x047: 50a70000000000000000 |     mrmovq (%rdi), %r10	# first of src
0x051: c0f72800000000000000 | 	iaddq $40, %rdi # src+5 
0x05b: 40a60000000000000000 |     rmmovq %r10, (%rsi) # first dest
0x065: 62aa                 |     andq %r10, %r10
0x067: 717a00000000000000   |     jle second
0x070: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x07a:                      | second:
0x07a: 50a7e0ffffffffffffff |     mrmovq -32(%rdi), %r10 # second src
0x084: c0f62800000000000000 |     iaddq $40, %rsi # dest+5
0x08e: 40a6e0ffffffffffffff |     rmmovq %r10, -32(%rsi) # second dest
0x098: 62aa                 |     andq %r10, %r10
0x09a: 50a7e8ffffffffffffff |     mrmovq -24(%rdi), %r10 # third src
0x0a4: 71b700000000000000   |     jle third
0x0ad: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x0b7:                      | third:
0x0b7: 40a6e8ffffffffffffff |     rmmovq %r10, -24(%rsi) # third dest
0x0c1: 62aa                 |     andq %r10, %r10
0x0c3: 50a7f0ffffffffffffff |     mrmovq -16(%rdi), %r10 # fourth src
0x0cd: 71e000000000000000   |     jle fourth
0x0d6: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x0e0:                      | fourth:
0x0e0: 40a6f0ffffffffffffff |     rmmovq %r10, -16(%rsi) # fourth dest
0x0ea: 62aa                 |     andq %r10, %r10
0x0ec: 50a7f8ffffffffffffff |     mrmovq -8(%rdi), %r10 # fifth src
0x0f6: 710901000000000000   |     jle fifth
0x0ff: c0f00100000000000000 |     iaddq $1, %rax
                            |     
0x109:                      | fifth:
0x109: 40a6f8ffffffffffffff |     rmmovq %r10, -8(%rsi) # fifth dest
0x113: 62aa                 |     andq %r10, %r10
0x115: 712801000000000000   |     jle test_len2
0x11e: c0f00100000000000000 |     iaddq $1, %rax
                            | 
0x128:                      | test_len2:
0x128: c0f2fbffffffffffffff |     iaddq $-5, %rdx # update length
0x132: 764700000000000000   |     jg loop 
                            |     
                            | 
0x13b:                      | reset:
0x13b: c0f20400000000000000 |     iaddq $4, %rdx #reset the length
                            | 
0x145:                      | test_len: # to test if there is element left
0x145: 764f01000000000000   |     jg loop1 # len > 0
0x14e: 90                   |     ret 
0x14f:                      | loop1:
0x14f: 50a70000000000000000 |     mrmovq (%rdi), %r10
0x159: c0f70800000000000000 |     iaddq $8, %rdi
0x163: 62aa                 |     andq %r10, %r10
0x165: 717801000000000000   |     jle skip
0x16e: c0f00100000000000000 |     iaddq $1, %rax
0x178:                      | skip:
0x178: 40a60000000000000000 |     rmmovq %r10, (%rsi)
0x182: c0f60800000000000000 |     iaddq $8, %rsi
0x18c: c0f2ffffffffffffffff |     iaddq $-1, %rdx
0x196: 704501000000000000   |     jmp test_len
                            |   
                            | 
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x19f:                      | Done:
0x19f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1a0:                      | End:
                            | #/* $end ncopy-ys */
0x1a0:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1a0:                      | 	.align 8
0x1a0:                      | src:
0x1a0: 0100000000000000     | 	.quad 1
0x1a8: 0200000000000000     | 	.quad 2
0x1b0: fdffffffffffffff     | 	.quad -3
0x1b8: 0400000000000000     | 	.quad 4
0x1c0: 0500000000000000     | 	.quad 5
0x1c8: 0600000000000000     | 	.quad 6
0x1d0: 0700000000000000     | 	.quad 7
0x1d8: 0800000000000000     | 	.quad 8
0x1e0: f7ffffffffffffff     | 	.quad -9
0x1e8: 0a00000000000000     | 	.quad 10
0x1f0: 0b00000000000000     | 	.quad 11
0x1f8: 0c00000000000000     | 	.quad 12
0x200: 0d00000000000000     | 	.quad 13
0x208: 0e00000000000000     | 	.quad 14
0x210: f1ffffffffffffff     | 	.quad -15
0x218: 1000000000000000     | 	.quad 16
0x220: 1100000000000000     | 	.quad 17
0x228: 1200000000000000     | 	.quad 18
0x230: 1300000000000000     | 	.quad 19
0x238: ecffffffffffffff     | 	.quad -20
0x240: ebffffffffffffff     | 	.quad -21
0x248: 1600000000000000     | 	.quad 22
0x250: e9ffffffffffffff     | 	.quad -23
0x258: e8ffffffffffffff     | 	.quad -24
0x260: e7ffffffffffffff     | 	.quad -25
0x268: e6ffffffffffffff     | 	.quad -26
0x270: e5ffffffffffffff     | 	.quad -27
0x278: 1c00000000000000     | 	.quad 28
0x280: 1d00000000000000     | 	.quad 29
0x288: e2ffffffffffffff     | 	.quad -30
0x290: 1f00000000000000     | 	.quad 31
0x298: 2000000000000000     | 	.quad 32
0x2a0: 2100000000000000     | 	.quad 33
0x2a8: 2200000000000000     | 	.quad 34
0x2b0: ddffffffffffffff     | 	.quad -35
0x2b8: dcffffffffffffff     | 	.quad -36
0x2c0: dbffffffffffffff     | 	.quad -37
0x2c8: daffffffffffffff     | 	.quad -38
0x2d0: d9ffffffffffffff     | 	.quad -39
0x2d8: 2800000000000000     | 	.quad 40
0x2e0: 2900000000000000     | 	.quad 41
0x2e8: 2a00000000000000     | 	.quad 42
0x2f0: 2b00000000000000     | 	.quad 43
0x2f8: d4ffffffffffffff     | 	.quad -44
0x300: d3ffffffffffffff     | 	.quad -45
0x308: 2e00000000000000     | 	.quad 46
0x310: d1ffffffffffffff     | 	.quad -47
0x318: d0ffffffffffffff     | 	.quad -48
0x320: cfffffffffffffff     | 	.quad -49
0x328: 3200000000000000     | 	.quad 50
0x330: 3300000000000000     | 	.quad 51
0x338: 3400000000000000     | 	.quad 52
0x340: cbffffffffffffff     | 	.quad -53
0x348: caffffffffffffff     | 	.quad -54
0x350: c9ffffffffffffff     | 	.quad -55
0x358: c8ffffffffffffff     | 	.quad -56
0x360: c7ffffffffffffff     | 	.quad -57
0x368: c6ffffffffffffff     | 	.quad -58
0x370: c5ffffffffffffff     | 	.quad -59
0x378: c4ffffffffffffff     | 	.quad -60
0x380: c3ffffffffffffff     | 	.quad -61
0x388: c2ffffffffffffff     | 	.quad -62
0x390: c1ffffffffffffff     | 	.quad -63
0x398: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3a0:                      | 	.align 16
0x3a0:                      | Predest:
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa
0x3a8:                      | dest:
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0:                      | Postdest:
0x5a0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5a8:                      | .align 8
                            | # Run time stack
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
                            | 
0x628:                      | Stack:
